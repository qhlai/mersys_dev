cmake_minimum_required(VERSION 2.8.3)
project(colive_backend)


find_package(catkin_simple REQUIRED)
catkin_simple(ALL_DEPS_REQUIRED)

set(CMAKE_BUILD_TYPE "Release")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++14")

set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -std=c++14 -O3 -lboost_system -msse2 -msse3 -pthread -Wenum-compare") # -Wall
set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

# add_definitions(-DROOT_DIR=\"${CMAKE_CURRENT_SOURCE_DIR}/\")

# Add OpenCV if available
# set(OpenCV_DIR "/home/zivlin/opt/opencv/build")
FIND_PACKAGE(Boost REQUIRED COMPONENTS filesystem iostreams program_options system serialization)
if(Boost_FOUND)
	INCLUDE_DIRECTORIES(${Boost_INCLUDE_DIRS})
	LINK_DIRECTORIES(${Boost_LIBRARY_DIRS})
endif()
set (INCLUDE_DIRS

${PROJECT_SOURCE_DIR}/src
${PROJECT_SOURCE_DIR}/src/base
${PROJECT_SOURCE_DIR}/src/core
${PROJECT_SOURCE_DIR}/src/map
${PROJECT_SOURCE_DIR}/src/map/frames
${PROJECT_SOURCE_DIR}/src/tools
${PROJECT_SOURCE_DIR}/src/communicator
${PROJECT_SOURCE_DIR}/src/communicator/server
${PROJECT_SOURCE_DIR}/src/communicator/client
${PROJECT_SOURCE_DIR}/src/communicator/client/colive_backend
${PROJECT_SOURCE_DIR}/src/visualizer
)
file(GLOB_RECURSE TOOLS_INC_FILES     
${PROJECT_SOURCE_DIR}/src/tools/*.hpp
)
file(GLOB_RECURSE TOOLS_SRC_FILES     
${PROJECT_SOURCE_DIR}/src/tools/*.hpp
)
file(GLOB_RECURSE BACKEND_INC_FILES     
${PROJECT_SOURCE_DIR}/src/core/*.hpp
)
file(GLOB_RECURSE BACKEND_SRC_FILES     
${PROJECT_SOURCE_DIR}/src/core/*.cpp
)
file(GLOB_RECURSE FRAME_INC_FILES     
${PROJECT_SOURCE_DIR}/src/map/frames/*.cpp
)
file(GLOB_RECURSE FRAME_SRC_FILES     
${PROJECT_SOURCE_DIR}/src/map/frames/*.cpp
)
file(GLOB_RECURSE COMM_INC_FILES     
${PROJECT_SOURCE_DIR}/src/communicator/*.hpp
)
file(GLOB_RECURSE COMM_SRC_FILES     
${PROJECT_SOURCE_DIR}/src/communicator/*.cpp
)

file(GLOB_RECURSE MAP_INC_FILES     
${PROJECT_SOURCE_DIR}/src/map/*.hpp
)
file(GLOB_RECURSE MAP_SRC_FILES     
${PROJECT_SOURCE_DIR}/src/map/map_co.cpp
${PROJECT_SOURCE_DIR}/src/map/mapmanager.cpp
${PROJECT_SOURCE_DIR}/src/map/frames/*.cpp
)

file(GLOB_RECURSE VIS_INC_FILES     
${PROJECT_SOURCE_DIR}/src/visualizer/*.cpp
# ${PROJECT_SOURCE_DIR}/src/visualizer/visualizer.cpp
)
file(GLOB_RECURSE VIS_SRC_FILES     
${PROJECT_SOURCE_DIR}/src/visualizer/*.cpp
# ${PROJECT_SOURCE_DIR}/src/visualizer/visualizer.cpp
)
set(SB  

${BACKEND_INC_FILES}
${BACKEND_SRC_FILES}
${FRAME_INC_FILES}
${FRAME_SRC_FILES}
    ${MAP_INC_FILES}
    ${MAP_SRC_FILES}
    ${COMM_INC_FILES}  
    ${COMM_SRC_FILES}  
    ${VIS_INC_FILES} 
    ${VIS_SRC_FILES}
    ${TOOLS_INC_FILES}
    ${TOOLS_SRC_FILES}
)
if (NOT BUILD_LIBRARY)
    cs_add_library(config_backend ${BACKEND_SRC_FILES} ${BACKEND_INC_FILES} ${TOOLS_INC_FILES} ${SB}) 
    cs_add_library(colive_backend ${BACKEND_SRC_FILES} ${BACKEND_INC_FILES}${TOOLS_INC_FILES} ${SB})
    # cs_add_library(covins_comm ${COMM_SOURCE_FILES} ${COMM_HEADER_FILES})
    # target_link_libraries(covins_comm ${catkin_LIBRARIES} ${EXTERNAL_LIBRARIES})

    # cs_install()
    # cs_export()

else()
    if (NOT USE_CATKIN)
        include_directories(${CMAKE_SOURCE_DIR}/thirdparty/cereal)
        # create library
        message("${PROJECT_SOURCE_DIR}/lib")
        set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/lib)

        add_library(${PROJECT_NAME} SHARED ${COMM_SOURCE_FILES} ${COMM_HEADER_FILES})
        option(BUILD_SHARED_LIBS "Build shared library" ON)

        target_link_libraries(${PROJECT_NAME} Eigen3::Eigen)
    endif()

endif()
